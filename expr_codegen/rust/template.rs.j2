// this code is auto generated by the expr_codegen
// https://github.com/wukan1986/expr_codegen
// 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request
use polars::prelude::*;

pub fn ts_delay(x: Expr, n: i16) -> Expr {
    x.shift(lit(n))
}

pub fn ts_mean(x: Expr, d: usize) -> Expr {
    x.rolling_mean(RollingOptionsFixedWindow {
        window_size: d,
        min_periods: d,
        weights: None,
        center: false,
        fn_params: None,
    })
}

pub fn ts_sum(x: Expr, d: usize) -> Expr {
    x.rolling_sum(RollingOptionsFixedWindow {
        window_size: d,
        min_periods: d,
        weights: None,
        center: false,
        fn_params: None,
    })
}

pub fn cs_zscore(x: Expr, ddof: u8) -> Expr {
    (x.clone() - x.clone().mean()) / x.clone().std(ddof)
}

const _DATE_: &str = "date";
const _ASSET_: &str = "asset";
const _NONE_: Option<i32> = None;
const _TRUE_: bool = true;
const _FALSE_: bool = false;



{%-for row in extra_codes %}
{{ row-}}
{% endfor %}

{% for key, value in funcs.items() %}

fn {{ key }}(mut df: LazyFrame) -> LazyFrame{
{{ value }}
    df}

{% endfor %}

/*
{%-for row in exprs_dst %}
{{ row-}}
{% endfor %}
*/

/*
{%-for a,b,c in exprs_src %}
{{ a }} = {{ b}} {{c-}}
{% endfor %}
*/

pub fn main_(mut df: LazyFrame, ge_date_idx: i64) -> LazyFrame {
    {% for key, value in groupbys.items() %}
    {{ value-}}
    {% endfor %}

    df
}

pub fn _filter_last(df: LazyFrame, ge_date_idx: i64) -> LazyFrame {
    if ge_date_idx == 0 {
        df
    } else {
        let date_expr = col(_DATE_)
            .unique()
            .sort(SortOptions::default())
            .slice(ge_date_idx, 1)
            .first();

        df.filter(col(_DATE_).gt_eq(date_expr))
    }
}

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // 目前生成的代码还需要调整才能投入使用，还有更多的函数需要补充
    let mut df = df! (
        "date" => [1, 2, 3, 4, 5, 1, 2, 3, 4],
        "asset" => [1, 2, 3, 1, 2, 3, 1, 2, 3],
        "OPEN" => [1, 2, 3, 4, 5, 6, 7, 8, 9],
        "HIGH" => [1, 2, 3, 4, 5, 6, 7, 8, 9],
        "LOW" => [1, 2, 3, 4, 5, 6, 7, 8, 9],
        "CLOSE" => [1, 2, 3, 4, 5, 6, 7, 8, 9],
    )?;

    df = main_(df.lazy(), 0)
        .drop(Selector::Matches("^_.*$".into()))
        .collect()?;
    println!("{:?}", df);

    Ok(())
}

/*
# Cargo.toml
# https://docs.pola.rs/user-guide/installation/

[package]
name = "expr_codegen_rs"
version = "0.1.0"
edition = "2024"

[dependencies]
polars = { version = "0.51.0", features = [
    "lazy",
    "round_series",
    "strings",
    "regex",
    "rolling_window",
] }

*/