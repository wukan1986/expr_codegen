// this code is auto generated by the expr_codegen
// https://github.com/wukan1986/expr_codegen
// 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request
use polars::prelude::*;

pub fn ts_mean(x: Expr, d: usize) -> Expr {
    x.rolling_mean(RollingOptionsFixedWindow {
        window_size: d,
        min_periods: d,
        weights: None,
        center: false,
        fn_params: None,
    })
}

pub fn ts_sum(x: Expr, d: usize) -> Expr {
    x.rolling_sum(RollingOptionsFixedWindow {
        window_size: d,
        min_periods: d,
        weights: None,
        center: false,
        fn_params: None,
    })
}

pub fn cs_zscore(x: Expr, ddof: u8) -> Expr {
    (x.clone() - x.clone().mean()) / x.clone().std(ddof)
}

const _DATE_: &str = "date";
const _ASSET_: &str = "asset";
const _NONE_: Option<i32> = None;
const _TRUE_: bool = true;
const _FALSE_: bool = false;



{%-for row in extra_codes %}
{{ row-}}
{% endfor %}

{% for key, value in funcs.items() %}

fn {{ key }}(mut df: LazyFrame) -> LazyFrame{
{{ value }}
    df}

{% endfor %}

/*
{%-for row in exprs_dst %}
{{ row-}}
{% endfor %}
*/

/*
{%-for a,b,c in exprs_src %}
{{ a }} = {{ b}} {{c-}}
{% endfor %}
*/

pub fn main_(df: LazyFrame) -> LazyFrame {




    df

}

def _filter_last(df: DataFrame, ge_date_idx: int) -> DataFrame:
    """过滤数据，只取最后几天。实盘时可用于减少计算量
    """
    if ge_date_idx == 0:
        return df
    else:
        return df.filter(pl.col(_DATE_) >= df.select(pl.col(_DATE_).unique().sort())[ge_date_idx, 0])


def main(df: DataFrame, ge_date_idx: int) -> DataFrame:
    {% for key, value in groupbys.items() %}
    {{ value-}}
    {% endfor %}

    # drop intermediate columns
    df = df.select(~cs.starts_with("_"))

    # shrink
    # df = df.select(col.shrink_dtype() for col in df)

    return df

