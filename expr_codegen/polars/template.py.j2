# this code is auto generated by the expr_codegen
# https://github.com/wukan1986/expr_codegen
# 此段代码由 expr_codegen 自动生成，欢迎提交 issue 或 pull request
from typing import TypeVar

import polars as pl  # noqa
import polars.selectors as cs  # noqa
# from loguru import logger  # noqa
from polars import DataFrame as _pl_DataFrame
from polars import LazyFrame as _pl_LazyFrame

# ===================================
# 导入优先级，例如：ts_RSI在ta与talib中都出现了，优先使用ta
# 运行时，后导入覆盖前导入，但IDE智能提示是显示先导入的
_ = 0  # 只要之前出现了语句，之后的import位置不参与调整
# from polars_ta.prefix.talib import *  # noqa
from polars_ta.prefix.tdx import *  # noqa
from polars_ta.prefix.ta import *  # noqa
from polars_ta.prefix.wq import *  # noqa
from polars_ta.prefix.cdl import *  # noqa
from polars_ta.prefix.vec import *  # noqa

DataFrame = TypeVar('DataFrame', _pl_LazyFrame, _pl_DataFrame)
# ===================================

{{ syms1 }}

{{ syms2 }}

_DATE_ = '{{ date }}'
_ASSET_ = '{{ asset }}'
_NONE_ = None
_TRUE_ = True
_FALSE_ = False


def unpack(x: pl.Expr, idx: int = 0) -> pl.Expr:
    return x.struct[idx]

{%-for row in extra_codes %}
{{ row-}}
{% endfor %}

{% for key, value in funcs.items() %}

def {{ key }}(df: DataFrame) -> DataFrame:
{{ value }}
    return df

{% endfor %}

"""
{%-for row in exprs_dst %}
{{ row-}}
{% endfor %}
"""

"""
{%-for a,b,c in exprs_src %}
{{ a }} = {{ b}} {{c-}}
{% endfor %}
"""


def _filter_last(df: DataFrame, filter_last: bool) -> DataFrame:
    """过滤数据，只取最后一天。实盘时可用于减少计算量
    前一个调用的ts,这里可以直接调用，可以认为已经排序好
        `df = filter_last(df)`
    反之
        `df = filter_last(df.sort(_DATE_))`
    """
    if filter_last:
        return df.filter(pl.col(_DATE_) >= df.select(pl.last(_DATE_))[0, 0])
    else:
        return df


def main(df: DataFrame, filter_last: bool) -> DataFrame:
    {% for key, value in groupbys.items() %}
    {{ value-}}
    {% endfor %}

    # drop intermediate columns
    # df = df.select(pl.exclude(r'^_x_\d+$'))
    df = df.select(~cs.starts_with("_"))

    # shrink
    df = df.select(cs.all().shrink_dtype())

    return df

